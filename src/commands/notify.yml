description: |
  Notify a Glue target with a custom message.
  The environment variables GLUE_ACCESS_TOKEN and GLUE_DEFAULT_TARGET must be set for this orb to work.
  For instructions on how to set them, follow the setup guide available in the wiki: https://github.com/gluegroups/circle-orb/wiki/Setup.

parameters:
  template:
    description: |
      Select which template to use for the notification by its name. The name must be available as an environment variable.
      The built-in templates can be found and previewed at: https://github.com/gluegroups/circle-orb/wiki#templates.
      Alternatively, you can create and use your own dynamic templates: https://github.com/gluegroups/circle-orb/wiki/Dynamic-Templates.
      If left empty and no custom template is provided, the template will be automatically selected based on the job status.
    type: string
    default: ""
  custom:
    description: |
      Enter a custom message template.

      1. Create your message template using the Glue markdown.
      2. Insert any desired environment variables.
      3. Paste value here.
    type: string
    default: ""
  event:
    description: |
      In what event should this message send? Options: ["fail", "pass", "always"]
    type: enum
    enum: ["fail", "pass", "always"]
    default: "always"
  branch_pattern:
    description: |
      A comma separated list of regex matchable branch names. Notifications will only be sent if sent from a job from these branches.
      By default ".+" will be used to match all branches. Pattern must match the full string, no partial matches.
    type: string
    default: ".+"
  tag_pattern:
    description: |
      A comma separated list of regex matchable tag names. Notifications will only be sent if sent from a job from these branches.
      By default ".+" will be used to match all tags. Pattern must match the full string, no partial matches.
    type: string
    default: ".+"
  invert_match:
    description: |
      Invert the branch and tag patterns.
      If set to true, notifications will only be sent if sent from a job from branches and tags that do not match the patterns.
    type: boolean
    default: false
  mentions:
    description: |
      Exports to the "$GLUE_PARAM_MENTIONS" environment variable for use in templates.
      Mention users via the @ symbol: "@USER"
      If the username contains a space, the Glue ID must be used with angled brackets: "<@U8XXXXXXX>"
    type: string
    default: ""
  target:
    description: |
      Specify a Glue thread ID (thr_ABCXYZ) or group ID (grp_ABCXYZ) to post to. If you specify a group ID, this will post a message to the group chat by default,
      but you can also specify a `thread_subject` in order ot create a thread. If You may include a comma separated list of targets if you wish to post to multiple targets at once.
      Set the "GLUE_DEFAULT_TARGET" environment variable for the default target.
    type: string
    default: $GLUE_DEFAULT_TARGET
  ignore_errors:
    description: |
      Ignore errors posting to Glue.
      Disable to catch initial setup errors. Re-enable to prevent Glue errors from affecting your pipeline.
    type: boolean
    default: true
  debug:
    description: |
      Enable to view full payload being sent to Glue and response being received from the API call.
      Redacted content can be viewed by re-running the job with SSH and accessing the log files referenced in the job output.
      When run in a persistent build environment such as CircleCI Runner, these debug log files may remain in the system's temporary filesystem indefinitely and accumulate over time.
    type: boolean
    default: false
  circleci_host:
    description: |
      A CircleCI Host which used in a message template.
    type: string
    default: https://circleci.com
  step_name:
    type: string
    default: Glue - Sending Notification
    description: Specify a custom step name for this command, if desired
  thread_by:
    type: string
    default: ""
    description: |
      When set, the first `notify` with a given `thread_by` will create new Glue thread.
      Any subsequent `notify` usage with the same identifier will be posted within that same thread.
      `thread_by` should be set to any arbitrary string to help you identify different threads. See examples for more information.
      To use this feature, a group ID must be used as the `target` and `threadSubject` must be specified.
  thread_subject:
    type: string
    default: ""
    description: |
      When specified, a new Glue thread will be created with this thread subject.
      To use this feature, a group ID must be used as the `target`.
steps:
  - run:
      when: on_fail
      name: Glue - Detecting Job Status (FAIL)
      command: |
        echo 'export CCI_STATUS="fail"' > /tmp/GLUE_JOB_STATUS
  - run:
      when: on_success
      name: Glue - Detecting Job Status (PASS)
      command: |
        echo 'export CCI_STATUS="pass"' > /tmp/GLUE_JOB_STATUS
  - run:
      when: always
      name: << parameters.step_name >>
      environment:
        GLUE_PARAM_EVENT: "<<parameters.event>>"
        GLUE_PARAM_TEMPLATE: "<<parameters.template>>"
        GLUE_PARAM_CUSTOM: "<<parameters.custom>>"
        GLUE_PARAM_MENTIONS: "<<parameters.mentions>>"
        GLUE_PARAM_BRANCHPATTERN: "<<parameters.branch_pattern>>"
        GLUE_PARAM_TAGPATTERN: "<<parameters.tag_pattern>>"
        GLUE_PARAM_INVERT_MATCH: "<<parameters.invert_match>>"
        GLUE_PARAM_TARGET: "<<parameters.target>>"
        GLUE_PARAM_IGNORE_ERRORS: "<<parameters.ignore_errors>>"
        GLUE_PARAM_DEBUG: "<<parameters.debug>>"
        GLUE_PARAM_CIRCLECI_HOST: "<<parameters.circleci_host>>"
        GLUE_PARAM_THREAD_BY: "<<parameters.thread_by>>"
        GLUE_PARAM_THREAD_SUBJECT: "<<parameters.thread_subject>>"
        GLUE_SCRIPT_NOTIFY: "<<include(scripts/notify.sh)>>"
        GLUE_SCRIPT_UTILS: "<<include(scripts/utils.sh)>>"
        # import pre-built templates using the orb-pack local script include.
        basic_fail_1: "<<include(message_templates/basic_fail_1.md)>>"
        success_tagged_deploy_1: "<<include(message_templates/success_tagged_deploy_1.md)>>"
        basic_on_hold_1: "<<include(message_templates/basic_on_hold_1.md)>>"
        basic_success_1: "<<include(message_templates/basic_success_1.md)>>"
      command: <<include(scripts/main.sh)>>
