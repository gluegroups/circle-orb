version: 2.1
orbs:
  orb-tools: circleci/orb-tools@12.0
  glue: {}

filters: &filters
  tags:
    only: /.*/

release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

jobs:
  integration-test-templates:
    parameters:
      runner:
        type: executor
        default: cimg
    executor: <<parameters.runner>>
    steps:
      - checkout
      - glue/notify:
          debug: true
          step_name: "Custom template with group mention"
          event: always
          custom: |
            **Current Job: $CIRCLE_JOB**
            This test will @ a normal user, a user ID, and normal group name: <@U8C9ETTUG>, @orbs, @gabriel
      - run:
          name: Verify GLUE_JOB_STATUS is written
          command: |
            grep "pass" /tmp/GLUE_JOB_STATUS
      - glue/notify:
          debug: true
          step_name: "Fail template with mentions"
          template: basic_fail_1
          mentions: "[CircleCI Orb](glue:grp_2l554gu1RmXb9PpQDbYOk47LJgx)"
          event: always
      - glue/notify:
          debug: true
          step_name: "Success template with mentions"
          template: basic_success_1
          event: always
      - glue/notify:
          debug: true
          step_name: "Success tagged template"
          template: success_tagged_deploy_1
          event: always
      - glue/notify:
          debug: true
          step_name: "Basic on hold template"
          template: basic_on_hold_1
          event: always
      - glue/notify:
          debug: true
          step_name: "Custom template with env var in the message"
          event: pass
          custom: >
            Sample link using environment variable in markdown [LINK](${CIRCLE_BUILD_URL})
      - run:
          name: Dynamically populate the mention and export the template as an environment variable
          command: |
            echo 'export COMMIT_MESSAGE="This text comes from an environment variable"' >> $BASH_ENV
            echo 'export GLUE_PARAM_MENTIONS="$COMMIT_MESSAGE"' >> $BASH_ENV
            echo 'export MY_ORB_TEMPLATE=$(cat src/message_templates/basic_success_1.md)' >> $BASH_ENV
      - glue/notify:
          debug: true
          step_name: "Dynamic template with environment variable"
          event: always
          template: MY_ORB_TEMPLATE
      - glue/notify:
          debug: true
          step_name: "Notify without template parameter"
      - glue/notify:
          debug: true
          step_name: "Invert match set to true on 'master' branch pattern"
          branch_pattern: "master"
          invert_match: true
      - run:
          name: Export variable with a multiline string
          command: |
            printf '%s\n' 'export MULTILINE_STRING=$(printf "%s\\n" "Line 1." "Line 2." "Line 3.")' >> "$BASH_ENV"
      - glue/notify:
          debug: true
          step_name: "Notify with multiline string"
          event: pass
          custom: >
            This message should show over multiple lines: $MULTILINE_STRING
      - run:
          name: Export variable with double quotes
          command: |
            printf '%s\n' 'export DOUBLE_QUOTES_STRING=$(printf "%s\\n" "Hello There! My name is \"Potato\"")' >> "$BASH_ENV"
      - glue/notify:
          debug: true
          step_name: "Notify with double-quoted string"
          event: pass
          custom: >
            This message should show a string between double quotes: $DOUBLE_QUOTES_STRING
      - run:
          name: Export variable with backslashes
          command: |
            printf '%s\n' 'export BACKSLASHES_STRING="This is how a \ looks like"' >> "$BASH_ENV"
      - glue/notify:
          debug: true
          step_name: "Notify with backslashes string"
          event: pass
          custom: >
            This message should show a backslash: $BACKSLASHES_STRING
      - run:
          name: Export value to file
          command: |
            printf '%s\n' "Hello There!" > /tmp/msg
      - glue/notify:
          debug: true
          step_name: "Notify with custom message coming from sub-shell and template variable"
          event: always
          custom: |
            **Current Job: $CIRCLE_JOB**
            $(cat /tmp/msg)
      - glue/notify:
          debug: true
          step_name: "Notify with only custom message coming from sub-shell"
          event: always
          custom: |
            $(cat /tmp/msg)
      - glue/notify:
          debug: true
          step_name: "Notify in a new thread"
          event: always
          thread_by: testing-$CIRCLE_SHA1
          thread_subject: CI workflow for $CIRCLE_SHA1
          custom: |
            **Message 1.**
      - glue/notify:
          debug: true
          step_name: "Notify in a new thread"
          event: always
          thread_by: testing-$CIRCLE_SHA1
          thread_subject: CI workflow for $CIRCLE_SHA1
          custom: |
            **Message 2.**

workflows:
  test-deploy:
    jobs:
      - integration-test-templates:
          context: circle-orb-test
          filters: *filters
          matrix:
            parameters:
              runner: [cimg, mac, alpine, windows]
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: gluegroups/glue
          vcs_type: << pipeline.project.type >>
          pub_type: production
          enable_pr_comment: true
          github_token: GHI_TOKEN
          requires: [orb-tools/pack, integration-test-templates]
          context: orb-publishing
          filters: *release-filters
executors:
  cimg:
    docker:
      - image: cimg/base:current
  mac:
    macos:
      xcode: 14.0.0
  alpine:
    # This image contains both CURL and JQ
    docker:
      - image: dwdraju/alpine-curl-jq
  windows:
    machine:
      image: windows-server-2019-vs2019:current
      resource_class: windows.medium
      shell: bash.exe